---
import ThemeToggle from "./ThemeToggle.astro";

const navItems = [
  {
    title: "Experiencia",
    label: "experiencia",
    url: "/Sergi0Martin/#experiencia",
  },
  {
    title: "Proyectos",
    label: "proyectos",
    url: "/Sergi0Martin/#proyectos",
  },
  {
    title: "Sobre m√≠",
    label: "sobre-mi",
    url: "/Sergi0Martin/#sobre-mi",
  },
  {
    title: "Contacto",
    label: "contacto",
    external: true,
    url: "https://www.linkedin.com/in/smartin-dev/",
  },
];
---

<header
  class="fixed top-0 z-10 flex items-center justify-center w-full mx-auto mt-2"
>
  <nav
    class="flex px-3 text-sm font-medium rounded-full text-gray-600 dark:text-gray-200 justify-center items-center"
  >
    {
      navItems.map((link) => (
        <a
          class="relative block px-2 py-2 transition hover:font-black dark:hover:font-black"
          aria-label={link.label}
          target={link.external ? "_blank" : "_self"}
          href={link.url}
        >
          {link.title}
        </a>
      ))
    }
    <ThemeToggle />
  </nav>
</header>

<script>
  document.addEventListener("astro:page-load", () => {
    const sections = document.querySelectorAll("section");
    const navItems = document.querySelectorAll("header nav a");

    const callback = (entries: any[]) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          navItems.forEach((item) => {
            if (item.getAttribute("aria-label") == entry.target.id) {
              item.classList.add("selected-item");
              // item.classList.add("font-bold")
            } else {
              item.classList.remove("selected-item");
              // item.classList.remove("font-bold")
            }
          });
        }
      });
    };

    const observer = new IntersectionObserver(callback, {
      root: null,
      rootMargin: "0px",
      threshold: 0.3,
    });

    sections.forEach((section) => {
      observer.observe(section);
    });

    // Cleanup function
    document.onvisibilitychange = () => {
      if (document.visibilityState === "hidden") {
        observer.disconnect();
      } else {
        sections.forEach((section) => {
          observer.observe(section);
        });
      }
    };
  });
</script>

<style>
  @media only screen and (min-width: 600px) {
    nav {
      font-size: large;
      animation: nav-shadown-big-screen 1s linear both;
      animation-timeline: scroll();
      animation-range: 0 100px;
    }
  }

  @media only screen and (max-width: 600px) {
    nav {
      font-size: smaller;
      margin-left: 3px;
      margin-right: 3px;
      animation: nav-shadown-small-screen 1s linear both;
      animation-timeline: scroll();
      animation-range: 0 100px;
    }
  }

  @keyframes nav-shadown-big-screen {
    to {
      box-shadow:
        0 10px 15px -3px rgb(0 0 0 / 0.1),
        0 4px 6px -4px rgb(0 0 0 / 0.1);
      @apply ring-1 ring-white/100 bg-white/90;
      transform: scale(0.8);
      color: grey;
    }
  }

  @keyframes nav-shadown-small-screen {
    to {
      box-shadow:
        0 10px 15px -3px rgb(0 0 0 / 0.1),
        0 4px 6px -4px rgb(0 0 0 / 0.1);
      @apply ring-1 ring-white/100 bg-white/90;
      transform: scale(0.8);
      color: grey;
    }
  }
</style>
